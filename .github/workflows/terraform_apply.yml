name: "Terraform"

on:
  workflow_dispatch:

  push:
    branches:
      - master

permissions:
  id-token: write # Required for OIDC
  contents: read # Required to check out repo

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # https://github.com/actions/checkout

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4 # https://github.com/aws-actions/configure-aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE }}
          aws-region: ${{ secrets.AWS_BACKEND_REGION }}

      - name: Verify AWS access
        run: aws s3 ls

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.3
      

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Create backend configuration file
        run: |
          cd terraform/dev-account
          cat <<EOF > backend.tfvars
          bucket = "${{ secrets.BACKEND_BUCKET_NAME }}"
          key = "terraform/state/terraform.tfstate"
          encrypt        = true
          dynamodb_table = "${{ secrets.BACKEND_DYNAMO_TABLE }}"
          region = "${{ secrets.AWS_BACKEND_REGION }}"
          EOF

      - name: Terraform Init, Plan, Apply
        run: |
          export TF_LOG=DEBUG
          export TF_LOG_PATH=tf.log
          
          cd terraform/dev-account
          terraform init -backend-config=backend.tfvars
      
          terraform plan \
            -var "github_org=eyawata" \
            -var "github_repo=cloud-resume" \
            -var "hosted_zone_id=${{ secrets.HOSTED_ZONE_ID }}" \
            -var "bucket_name=${{ secrets.WEBSITE_BUCKET_NAME }}" \
            -var "dev_account_id=${{ secrets.DEV_ACCOUNT_ID }}" \
            -var "dns_account_id=${{ secrets.DNS_ACCOUNT_ID }}" \
            -out plan.out
      
          terraform apply -auto-approve plan.out